import type { VercelRequest, VercelResponse } from '@vercel/node';
import { fetchCategories, fetchEntriesFromDate, fetchEntries } from './miniflux';

// api to fetch all category names and entry amount for a given time frame

export default async function (request: VercelRequest, response: VercelResponse) {
  const userToken = request.body.userToken
  const userUrl = request.body.userUrl
  const days = request.body.days

  // call miniflux api to get all the categories with provided API token and then return categories in response

  // want to fetch all categories
  const categories = await fetchCategories(userToken, userUrl)

  // we have all the ids
  const formattedCategories = categories.map(c => ({ id: c.id, title: c.title }))

  //get entreis for each categories
  //with Asynchronous Mapping as using 'Promise.all' to await all the promises generated by the map function
  //later, entires also can be fetched as result.entires
  const categoryWithAmount = await Promise.all(
    formattedCategories.map(async (category) => {
      const result = await fetchEntriesFromDate(category.id, days, userToken, userUrl)
      return ({
        categoryId: category.id,
        categoryTitle: category.title,
        total: result.total
      })
    })
  )

  const categoryWithAmountAllPeriods = await Promise.all(
    formattedCategories.map(async (category) => {
      const result = await fetchEntries(category.id, userToken, userUrl)
      return ({
        categoryId: category.id,
        categoryTitle: category.title,
        total: result.total
      })
    })
  )

  if (days) {
    response.send(categoryWithAmount);
  } else {
    response.send(categoryWithAmountAllPeriods);
  }

}